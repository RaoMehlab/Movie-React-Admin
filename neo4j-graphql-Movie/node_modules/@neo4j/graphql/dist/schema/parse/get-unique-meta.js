"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// eslint-disable-next-line consistent-return
function getUniqueMeta(directives, type, fieldName) {
    var _a, _b, _c;
    const uniqueDirective = directives.find((x) => x.name.value === "unique");
    if (uniqueDirective && type.kind === "InterfaceTypeDefinition") {
        throw new Error(`@unique directive cannot be used on interface type fields: ${type.name.value}.${fieldName}`);
    }
    if (uniqueDirective) {
        const constraintName = (_a = uniqueDirective.arguments) === null || _a === void 0 ? void 0 : _a.find((a) => a.name.value === "constraintName");
        return {
            constraintName: constraintName
                ? constraintName.value.value
                : `${type.name.value}_${fieldName}`,
        };
    }
    let uniqueId = false;
    const idDirective = directives.find((x) => x.name.value === "id");
    if (idDirective) {
        const idDirectiveUniqueArgument = (_c = (_b = idDirective === null || idDirective === void 0 ? void 0 : idDirective.arguments) === null || _b === void 0 ? void 0 : _b.find((a) => a.name.value === "unique")) === null || _c === void 0 ? void 0 : _c.value;
        // If unique argument is absent from @id directive, default is to use unique constraint
        uniqueId = idDirectiveUniqueArgument ? idDirectiveUniqueArgument.value : true;
    }
    if (uniqueId) {
        return {
            constraintName: `${type.name.value}_${fieldName}`,
        };
    }
}
exports.default = getUniqueMeta;
//# sourceMappingURL=get-unique-meta.js.map