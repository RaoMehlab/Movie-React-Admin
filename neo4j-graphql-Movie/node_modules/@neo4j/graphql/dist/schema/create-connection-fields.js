"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const classes_1 = require("../classes");
const pagination_1 = require("./pagination");
function createConnectionFields({ connectionFields, schemaComposer, composeNode, nodes, relationshipPropertyFields, }) {
    const relationships = [];
    const whereInput = schemaComposer.getITC(`${composeNode.getTypeName()}Where`);
    connectionFields.forEach((connectionField) => {
        const relationship = schemaComposer.getOrCreateOTC(connectionField.relationshipTypeName, (tc) => {
            tc.addFields({
                cursor: "String!",
                node: `${connectionField.relationship.typeMeta.name}!`,
            });
        });
        const connectionWhereName = `${connectionField.typeMeta.name}Where`;
        const connectionWhere = schemaComposer.getOrCreateITC(connectionWhereName);
        if (!connectionField.relationship.union) {
            connectionWhere.addFields({
                AND: `[${connectionWhereName}!]`,
                OR: `[${connectionWhereName}!]`,
            });
        }
        const connection = schemaComposer.getOrCreateOTC(connectionField.typeMeta.name, (tc) => {
            tc.addFields({
                edges: relationship.NonNull.List.NonNull,
                totalCount: "Int!",
                pageInfo: "PageInfo!",
            });
        });
        if (connectionField.relationship.properties && !connectionField.relationship.union) {
            const propertiesInterface = schemaComposer.getIFTC(connectionField.relationship.properties);
            relationship.addInterface(propertiesInterface);
            relationship.addFields(propertiesInterface.getFields());
            connectionWhere.addFields({
                edge: `${connectionField.relationship.properties}Where`,
                edge_NOT: `${connectionField.relationship.properties}Where`,
            });
        }
        whereInput.addFields({
            [connectionField.fieldName]: connectionWhere,
            [`${connectionField.fieldName}_NOT`]: connectionWhere,
        });
        let composeNodeArgs = {
            where: connectionWhere,
        };
        if (connectionField.relationship.properties) {
            const connectionSort = schemaComposer.getOrCreateITC(`${connectionField.typeMeta.name}Sort`);
            connectionSort.addFields({
                edge: `${connectionField.relationship.properties}Sort`,
            });
            composeNodeArgs.sort = connectionSort.NonNull.List;
        }
        if (connectionField.relationship.interface) {
            connectionWhere.addFields({
                OR: connectionWhere.NonNull.List,
                AND: connectionWhere.NonNull.List,
                node: `${connectionField.relationship.typeMeta.name}Where`,
                node_NOT: `${connectionField.relationship.typeMeta.name}Where`,
            });
            if (connectionField.relationship.properties) {
                const propertiesInterface = schemaComposer.getIFTC(connectionField.relationship.properties);
                relationship.addInterface(propertiesInterface);
                relationship.addFields(propertiesInterface.getFields());
                connectionWhere.addFields({
                    edge: `${connectionField.relationship.properties}Where`,
                    edge_NOT: `${connectionField.relationship.properties}Where`,
                });
            }
        }
        else if (connectionField.relationship.union) {
            const relatedNodes = nodes.filter((n) => { var _a, _b; return (_b = (_a = connectionField.relationship.union) === null || _a === void 0 ? void 0 : _a.nodes) === null || _b === void 0 ? void 0 : _b.includes(n.name); });
            relatedNodes.forEach((n) => {
                const unionWhereName = `${connectionField.typeMeta.name}${n.name}Where`;
                const unionWhere = schemaComposer.createInputTC({
                    name: unionWhereName,
                    fields: {
                        OR: `[${unionWhereName}]`,
                        AND: `[${unionWhereName}]`,
                    },
                });
                unionWhere.addFields({
                    node: `${n.name}Where`,
                    node_NOT: `${n.name}Where`,
                });
                if (connectionField.relationship.properties) {
                    const propertiesInterface = schemaComposer.getIFTC(connectionField.relationship.properties);
                    relationship.addInterface(propertiesInterface);
                    relationship.addFields(propertiesInterface.getFields());
                    unionWhere.addFields({
                        edge: `${connectionField.relationship.properties}Where`,
                        edge_NOT: `${connectionField.relationship.properties}Where`,
                    });
                }
                connectionWhere.addFields({
                    [n.name]: unionWhere,
                });
            });
        }
        else {
            const relatedNode = nodes.find((n) => n.name === connectionField.relationship.typeMeta.name);
            connectionWhere.addFields({
                node: `${connectionField.relationship.typeMeta.name}Where`,
                node_NOT: `${connectionField.relationship.typeMeta.name}Where`,
            });
            if (relatedNode.sortableFields.length) {
                const connectionSort = schemaComposer.getOrCreateITC(`${connectionField.typeMeta.name}Sort`);
                connectionSort.addFields({
                    node: `${connectionField.relationship.typeMeta.name}Sort`,
                });
                if (!composeNodeArgs.sort) {
                    composeNodeArgs.sort = connectionSort.NonNull.List;
                }
            }
            composeNodeArgs = {
                ...composeNodeArgs,
                first: {
                    type: "Int",
                },
                after: {
                    type: "String",
                },
            };
        }
        if (!connectionField.relationship.writeonly) {
            composeNode.addFields({
                [connectionField.fieldName]: {
                    type: connection.NonNull,
                    args: composeNodeArgs,
                    resolve: (source, args, ctx, info) => {
                        return pagination_1.connectionFieldResolver({
                            connectionField,
                            args,
                            info,
                            source,
                        });
                    },
                },
            });
        }
        const relFields = connectionField.relationship.properties
            ? relationshipPropertyFields.get(connectionField.relationship.properties)
            : {};
        const r = new classes_1.Relationship({
            name: connectionField.relationshipTypeName,
            type: connectionField.relationship.type,
            properties: connectionField.relationship.properties,
            ...(relFields
                ? {
                    temporalFields: relFields.temporalFields,
                    scalarFields: relFields.scalarFields,
                    primitiveFields: relFields.primitiveFields,
                    pointFields: relFields.pointFields,
                    ignoredFields: relFields.ignoredFields,
                }
                : {}),
        });
        relationships.push(r);
    });
    return relationships;
}
exports.default = createConnectionFields;
//# sourceMappingURL=create-connection-fields.js.map