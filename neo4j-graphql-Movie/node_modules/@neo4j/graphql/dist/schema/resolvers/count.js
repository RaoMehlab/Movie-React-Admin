"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../utils");
const translate_1 = require("../../translate");
const utils_2 = require("../../utils/utils");
const get_neo4j_resolve_tree_1 = __importDefault(require("../../utils/get-neo4j-resolve-tree"));
function countResolver({ node }) {
    async function resolve(_root, _args, _context, info) {
        const context = _context;
        if (info) {
            // FIXME: info is always available, this is only to support unit tests at count.test.ts
            context.resolveTree = get_neo4j_resolve_tree_1.default(info);
        }
        const [cypher, params] = translate_1.translateCount({ context, node });
        const executeResult = await utils_1.execute({
            cypher,
            params,
            defaultAccessMode: "READ",
            context,
        });
        const count = executeResult.result.records[0].get(0);
        if (utils_2.isNeoInt(count)) {
            return count.toNumber();
        }
        return count;
    }
    return {
        type: `Int!`,
        resolve,
        args: { where: `${node.name}Where`, ...(node.fulltextDirective ? { fulltext: `${node.name}Fulltext` } : {}) },
    };
}
exports.default = countResolver;
//# sourceMappingURL=count.js.map