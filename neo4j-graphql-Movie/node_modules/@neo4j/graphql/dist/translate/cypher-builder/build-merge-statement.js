"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildMergeStatement = void 0;
const classes_1 = require("../../classes");
const utils_1 = require("../../utils/utils");
const build_node_statement_1 = require("./build-node-statement");
const join_statements_1 = require("../utils/join-statements");
const build_relation_statement_1 = require("./build-relation-statement");
const utils_2 = require("./utils");
function buildMergeStatement({ leftNode, rightNode, relation, context, }) {
    const onCreateStatements = [];
    let leftStatement;
    let relationOnCreateStatement;
    if (leftNode.node) {
        // Autogenerate fields for left node
        leftNode.node.primitiveFields
            // Filter for autogenerated fields (e.g. @id) but only if field is not included in where
            .filter((field) => { var _a; return field.autogenerate && !Object.keys((_a = leftNode.parameters) !== null && _a !== void 0 ? _a : []).includes(field.fieldName); })
            .forEach((field) => {
            onCreateStatements.push([`${leftNode.varName}.${field.dbPropertyName} = randomUUID(),\n`, {}]);
        });
        leftNode.node.temporalFields
            .filter((field) => { var _a; return ["DateTime", "Time"].includes(field.typeMeta.name) && ((_a = field.timestamps) === null || _a === void 0 ? void 0 : _a.includes("CREATE")); })
            .forEach((field) => {
            onCreateStatements.push([
                `${leftNode.varName}.${field.dbPropertyName} = ${field.typeMeta.name.toLowerCase()}(),\n`,
                {},
            ]);
        });
    }
    if (leftNode.onCreate) {
        onCreateStatements.push(buildOnCreate(leftNode.onCreate, leftNode.varName));
    }
    if (rightNode === null || rightNode === void 0 ? void 0 : rightNode.onCreate) {
        onCreateStatements.push(buildOnCreate(rightNode.onCreate, rightNode.varName));
    }
    if (relation || rightNode) {
        if (!relation) {
            throw new classes_1.Neo4jGraphQLCypherBuilderError("Missing relation in Cypher merge relation statement");
        }
        if (!rightNode) {
            throw new classes_1.Neo4jGraphQLCypherBuilderError("Missing rightnode in Cypher merge relation statement");
        }
        const relationshipName = relation.varName || `${leftNode.varName}_relationship_${rightNode.varName}`;
        leftStatement = build_relation_statement_1.buildRelationStatement({
            context,
            leftNode,
            rightNode,
            relation: {
                relationField: relation.relationField,
                varName: relationshipName,
            },
        });
        const relationship = context.neoSchema.relationships.find((x) => x.properties === relation.relationField.properties);
        if (relationship) {
            // Autogenerate fields for relationship
            relationship.primitiveFields
                .filter((field) => field.autogenerate)
                .forEach((field) => {
                onCreateStatements.push([`${relationshipName}.${field.dbPropertyName} = randomUUID(),\n`, {}]);
            });
            relationship.temporalFields
                .filter((field) => { var _a; return ["DateTime", "Time"].includes(field.typeMeta.name) && ((_a = field.timestamps) === null || _a === void 0 ? void 0 : _a.includes("CREATE")); })
                .forEach((field) => {
                onCreateStatements.push([
                    `${relationshipName}.${field.dbPropertyName} = ${field.typeMeta.name.toLowerCase()}(),\n`,
                    {},
                ]);
            });
        }
        if (relation.onCreate) {
            relationOnCreateStatement = buildOnCreate(relation.onCreate, relationshipName);
            onCreateStatements.push(relationOnCreateStatement);
        }
    }
    else {
        leftStatement = build_node_statement_1.buildNodeStatement({
            ...leftNode,
            context,
        });
    }
    const mergeNodeStatement = join_statements_1.joinStatements(["MERGE ", leftStatement], "");
    const onCreateSetQuery = onCreateStatements.length > 0 ? "ON CREATE\nSET" : "";
    return join_statements_1.joinStatements([mergeNodeStatement, onCreateSetQuery, ...onCreateStatements]);
}
exports.buildMergeStatement = buildMergeStatement;
function buildOnCreate(onCreate, varName) {
    const queries = [];
    const parameters = {};
    Object.entries(onCreate).forEach(([key, value]) => {
        queries.push(`${varName}.${key} = $${utils_2.generateParameterKey(`${varName}_on_create`, key)}`);
        parameters[utils_2.generateParameterKey(`${varName}_on_create`, key)] = value;
    });
    return [utils_1.joinStrings(queries, ",\n"), parameters];
}
//# sourceMappingURL=build-merge-statement.js.map