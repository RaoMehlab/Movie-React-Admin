"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildRelationStatement = void 0;
const build_node_statement_1 = require("./build-node-statement");
const join_statements_1 = require("../utils/join-statements");
const utils_1 = require("./utils");
function buildRelationStatement({ leftNode, rightNode, context, relation, }) {
    const relationStatement = getRelationSubStatement(relation);
    const leftNodeStatement = build_node_statement_1.buildNodeStatement({
        context,
        ...leftNode,
    });
    const rightNodeStatement = build_node_statement_1.buildNodeStatement({
        context,
        ...rightNode,
    });
    return join_statements_1.joinStatements([leftNodeStatement, relationStatement, rightNodeStatement], "");
}
exports.buildRelationStatement = buildRelationStatement;
function getRelationSubStatement({ relationField, varName, parameters }) {
    const leftConnection = relationField.direction === "IN" ? "<-" : "-";
    const rightConnection = relationField.direction === "OUT" ? "->" : "-";
    const relationLabel = relationField.type ? `:${relationField.type}` : "";
    const [relParamsQuery, relParams] = serializeRelationParameters(varName, parameters);
    const relTypeStr = `[${varName || ""}${relationLabel}${utils_1.padLeft(relParamsQuery)}]`;
    return [`${leftConnection}${relTypeStr}${rightConnection}`, relParams];
}
function serializeRelationParameters(varName, parameters) {
    return utils_1.serializeParameters(`${varName}_relation`, parameters);
}
//# sourceMappingURL=build-relation-statement.js.map