"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const classes_1 = require("../classes");
const constants_1 = require("../constants");
const map_to_db_property_1 = __importDefault(require("../utils/map-to-db-property"));
const join_predicates_1 = __importStar(require("../utils/join-predicates"));
const context_parser_1 = __importDefault(require("../utils/context-parser"));
const utils_1 = require("../utils/utils");
function createRolesStr({ roles, escapeQuotes }) {
    const quote = escapeQuotes ? `\\"` : `"`;
    const joined = roles.map((r) => `${quote}${r}${quote}`).join(", ");
    return `ANY(r IN [${joined}] WHERE ANY(rr IN $auth.roles WHERE r = rr))`;
}
function createAuthPredicate({ rule, node, varName, context, chainStr, kind, }) {
    if (!rule[kind]) {
        return ["", {}];
    }
    const { allowUnauthenticated } = rule;
    const result = Object.entries(rule[kind]).reduce((res, [key, value]) => {
        if (join_predicates_1.isPredicateJoin(key)) {
            const inner = [];
            value.forEach((v, i) => {
                const authPredicate = createAuthPredicate({
                    rule: {
                        [kind]: v,
                        allowUnauthenticated,
                    },
                    varName,
                    node,
                    chainStr: `${chainStr}_${key}${i}`,
                    context,
                    kind,
                });
                inner.push(authPredicate[0]);
                res.params = { ...res.params, ...authPredicate[1] };
            });
            res.strs.push(join_predicates_1.default(inner, key));
        }
        const authableField = node.authableFields.find((field) => field.fieldName === key);
        if (authableField) {
            const jwtPath = utils_1.isString(value) ? context_parser_1.default.parseTag(value, "jwt") : undefined;
            let ctxPath = utils_1.isString(value) ? context_parser_1.default.parseTag(value, "context") : undefined;
            let paramValue = value;
            if (jwtPath)
                ctxPath = `jwt.${jwtPath}`;
            if (ctxPath) {
                paramValue = context_parser_1.default.getProperty(ctxPath, context);
            }
            if (paramValue === undefined && allowUnauthenticated !== true) {
                throw new classes_1.Neo4jGraphQLAuthenticationError("Unauthenticated");
            }
            const dbFieldName = map_to_db_property_1.default(node, key);
            if (paramValue === undefined) {
                res.strs.push("false");
            }
            else if (paramValue === null) {
                res.strs.push(`${varName}.${dbFieldName} IS NULL`);
            }
            else {
                const param = `${chainStr}_${key}`;
                res.params[param] = paramValue;
                res.strs.push(`${varName}.${dbFieldName} IS NOT NULL AND ${varName}.${dbFieldName} = $${param}`);
            }
        }
        const relationField = node.relationFields.find((x) => key === x.fieldName);
        if (relationField) {
            const refNode = context.neoSchema.nodes.find((x) => x.name === relationField.typeMeta.name);
            const inStr = relationField.direction === "IN" ? "<-" : "-";
            const outStr = relationField.direction === "OUT" ? "->" : "-";
            const relTypeStr = `[:${relationField.type}]`;
            const relationVarName = relationField.fieldName;
            const labels = refNode.getLabelString(context);
            let resultStr = [
                `EXISTS((${varName})${inStr}${relTypeStr}${outStr}(${labels}))`,
                `AND ${kind === "allow" ? "ANY" : "ALL"}(${relationVarName} IN [(${varName})${inStr}${relTypeStr}${outStr}(${relationVarName}${labels}) | ${relationVarName}] WHERE `,
            ].join(" ");
            Object.entries(value).forEach(([k, v]) => {
                const authPredicate = createAuthPredicate({
                    node: refNode,
                    context,
                    chainStr: `${chainStr}_${key}`,
                    varName: relationVarName,
                    rule: {
                        [kind]: { [k]: v },
                        allowUnauthenticated,
                    },
                    kind,
                });
                resultStr += authPredicate[0];
                resultStr += ")"; // close ALL
                res.params = { ...res.params, ...authPredicate[1] };
                res.strs.push(resultStr);
            });
        }
        return res;
    }, { params: {}, strs: [] });
    return [join_predicates_1.default(result.strs, "AND"), result.params];
}
function createAuthAndParams({ entity, operations, skipRoles, skipIsAuthenticated, allow, context, escapeQuotes, bind, where, }) {
    if (!entity.auth) {
        return ["", {}];
    }
    let authRules = [];
    if (operations) {
        const operationsList = utils_1.asArray(operations);
        authRules = entity === null || entity === void 0 ? void 0 : entity.auth.rules.filter((r) => !r.operations || utils_1.haveSharedElement(operationsList, r.operations || []));
    }
    else {
        authRules = entity === null || entity === void 0 ? void 0 : entity.auth.rules;
    }
    if (where) {
        const subPredicates = authRules.reduce((res, authRule, index) => {
            if (!authRule.where) {
                return res;
            }
            const authWhere = createAuthPredicate({
                rule: {
                    where: authRule.where,
                    allowUnauthenticated: authRule.allowUnauthenticated,
                },
                context,
                node: where.node,
                varName: where.varName,
                chainStr: `${where.chainStr || where.varName}_auth_where${index}`,
                kind: "where",
            });
            return {
                strs: [...res.strs, authWhere[0]],
                params: { ...res.params, ...authWhere[1] },
            };
        }, { strs: [], params: {} });
        return [join_predicates_1.default(subPredicates.strs, "OR"), subPredicates.params];
    }
    function createSubPredicate({ authRule, index, chainStr, }) {
        const thisPredicates = [];
        let thisParams = {};
        if (!skipRoles && authRule.roles) {
            thisPredicates.push(createRolesStr({ roles: authRule.roles, escapeQuotes }));
        }
        const quotes = escapeQuotes ? '\\"' : '"';
        if (!skipIsAuthenticated && (authRule.isAuthenticated === true || authRule.isAuthenticated === false)) {
            thisPredicates.push(`apoc.util.validatePredicate(NOT($auth.isAuthenticated = ${Boolean(authRule.isAuthenticated)}), ${quotes}${constants_1.AUTH_UNAUTHENTICATED_ERROR}${quotes}, [0])`);
        }
        if (allow && authRule.allow) {
            const allowAndParams = createAuthPredicate({
                context,
                node: allow.parentNode,
                varName: allow.varName,
                rule: authRule,
                chainStr: `${allow.chainStr || allow.varName}${chainStr || ""}_auth_allow${index}`,
                kind: "allow",
            });
            if (allowAndParams[0]) {
                thisPredicates.push(allowAndParams[0]);
                thisParams = { ...thisParams, ...allowAndParams[1] };
            }
        }
        join_predicates_1.PREDICATE_JOINS.forEach((key) => {
            const value = authRule[key];
            if (!value) {
                return;
            }
            const predicates = [];
            let predicateParams = {};
            value.forEach((v, i) => {
                const [str, par] = createSubPredicate({
                    authRule: v,
                    index: i,
                    chainStr: chainStr ? `${chainStr}${key}${i}` : `${key}${i}`,
                });
                if (!str) {
                    return;
                }
                predicates.push(str);
                predicateParams = { ...predicateParams, ...par };
            });
            thisPredicates.push(join_predicates_1.default(predicates, key));
            thisParams = { ...thisParams, ...predicateParams };
        });
        if (bind && authRule.bind) {
            const allowAndParams = createAuthPredicate({
                context,
                node: bind.parentNode,
                varName: bind.varName,
                rule: authRule,
                chainStr: `${bind.chainStr || bind.varName}${chainStr || ""}_auth_bind${index}`,
                kind: "bind",
            });
            if (allowAndParams[0]) {
                thisPredicates.push(allowAndParams[0]);
                thisParams = { ...thisParams, ...allowAndParams[1] };
            }
        }
        return [join_predicates_1.default(thisPredicates, "AND"), thisParams];
    }
    const subPredicates = authRules.reduce((res, authRule, index) => {
        const [str, par] = createSubPredicate({ authRule, index });
        return {
            strs: [...res.strs, str],
            params: { ...res.params, ...par },
        };
    }, { strs: [], params: {} });
    return [join_predicates_1.default(subPredicates.strs, "OR"), subPredicates.params];
}
exports.default = createAuthAndParams;
//# sourceMappingURL=create-auth-and-params.js.map