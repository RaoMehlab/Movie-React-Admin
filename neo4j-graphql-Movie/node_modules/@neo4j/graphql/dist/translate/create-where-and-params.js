"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@graphql-tools/utils");
const create_connection_where_and_params_1 = __importDefault(require("./where/create-connection-where-and-params"));
const map_to_db_property_1 = __importDefault(require("../utils/map-to-db-property"));
const create_aggregate_where_and_params_1 = __importDefault(require("./create-aggregate-where-and-params"));
function createWhereAndParams({ whereInput, varName, chainStr, node, context, recursing, }) {
    if (!Object.keys(whereInput).length) {
        return ["", {}];
    }
    function reducer(res, [key, value]) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
        let param = "";
        if (chainStr) {
            param = `${chainStr}_${key}`;
        }
        else {
            param = `${varName}_${key}`;
        }
        let dbFieldName = map_to_db_property_1.default(node, key);
        const pointField = node.pointFields.find((x) => key.startsWith(x.fieldName));
        // Comparison operations requires adding dates to durations
        // See https://neo4j.com/developer/cypher/dates-datetimes-durations/#comparing-filtering-values
        const durationField = node.primitiveFields.find((x) => key.startsWith(x.fieldName) && x.typeMeta.name === "Duration");
        if (key.endsWith("Aggregate")) {
            const [fieldName] = key.split("Aggregate");
            const relationField = node.relationFields.find((x) => x.fieldName === fieldName);
            const refNode = context.neoSchema.nodes.find((x) => x.name === relationField.typeMeta.name);
            const relationship = context.neoSchema.relationships.find((x) => x.properties === relationField.properties);
            const aggregateWhereAndParams = create_aggregate_where_and_params_1.default({
                node: refNode,
                chainStr: param,
                context,
                field: relationField,
                varName,
                aggregation: value,
                relationship,
            });
            if (aggregateWhereAndParams[0]) {
                res.clauses.push(aggregateWhereAndParams[0]);
                res.params = { ...res.params, ...aggregateWhereAndParams[1] };
            }
            return res;
        }
        if (key.endsWith("_NOT")) {
            const [fieldName] = key.split("_NOT");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const relationField = node.relationFields.find((x) => fieldName === x.fieldName);
            const connectionField = node.connectionFields.find((x) => fieldName === x.fieldName);
            const coalesceValue = (_a = [...node.primitiveFields, ...node.temporalFields].find((f) => fieldName === f.fieldName)) === null || _a === void 0 ? void 0 : _a.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            if (relationField) {
                const refNode = context.neoSchema.nodes.find((x) => x.name === relationField.typeMeta.name);
                const inStr = relationField.direction === "IN" ? "<-" : "-";
                const outStr = relationField.direction === "OUT" ? "->" : "-";
                const relTypeStr = `[:${relationField.type}]`;
                const labels = refNode.getLabelString(context);
                if (value === null) {
                    res.clauses.push(`EXISTS((${varName})${inStr}${relTypeStr}${outStr}(${labels}))`);
                    return res;
                }
                let resultStr = [
                    `EXISTS((${varName})${inStr}${relTypeStr}${outStr}(${labels}))`,
                    `AND NONE(${param} IN [(${varName})${inStr}${relTypeStr}${outStr}(${param}${labels}) | ${param}] INNER_WHERE `,
                ].join(" ");
                const recurse = createWhereAndParams({
                    whereInput: value,
                    varName: param,
                    chainStr: param,
                    node: refNode,
                    context,
                    recursing: true,
                });
                if (recurse[0]) {
                    resultStr += recurse[0];
                    resultStr += ")"; // close ALL
                    res.clauses.push(resultStr);
                    res.params = { ...res.params, ...recurse[1] };
                }
                return res;
            }
            if (connectionField) {
                let nodeEntries = value;
                if (!(connectionField === null || connectionField === void 0 ? void 0 : connectionField.relationship.union)) {
                    nodeEntries = { [connectionField.relationship.typeMeta.name]: value };
                }
                Object.entries(nodeEntries).forEach((entry) => {
                    const refNode = context.neoSchema.nodes.find((x) => x.name === entry[0]);
                    const relationship = context.neoSchema.relationships.find((x) => x.name === connectionField.relationshipTypeName);
                    const thisParam = `${param}_${refNode.name}`;
                    const relationshipVariable = `${thisParam}_${connectionField.relationshipTypeName}`;
                    const inStr = connectionField.relationship.direction === "IN" ? "<-" : "-";
                    const outStr = connectionField.relationship.direction === "OUT" ? "->" : "-";
                    const labels = refNode.getLabelString(context);
                    const collectedMap = `${thisParam}_map`;
                    if (value === null) {
                        res.clauses.push(`EXISTS((${varName})${inStr}[:${connectionField.relationship.type}]${outStr}(${labels}))`);
                        return;
                    }
                    let resultStr = [
                        `EXISTS((${varName})${inStr}[:${connectionField.relationship.type}]${outStr}(${labels}))`,
                        `AND NONE(${collectedMap} IN [(${varName})${inStr}[${relationshipVariable}:${connectionField.relationship.type}]${outStr}(${thisParam}${labels})`,
                        ` | { node: ${thisParam}, relationship: ${relationshipVariable} } ] INNER_WHERE `,
                    ].join(" ");
                    const parameterPrefix = recursing
                        ? `${chainStr || varName}_${context.resolveTree.name}.where.${key}`
                        : `${varName}_${context.resolveTree.name}.where.${key}`;
                    const connectionWhere = create_connection_where_and_params_1.default({
                        whereInput: entry[1],
                        context,
                        node: refNode,
                        nodeVariable: `${collectedMap}.node`,
                        relationship,
                        relationshipVariable: `${collectedMap}.relationship`,
                        parameterPrefix,
                    });
                    resultStr += connectionWhere[0];
                    resultStr += ")"; // close ALL
                    res.clauses.push(resultStr);
                    const resolveTreeParams = recursing
                        ? {
                            [`${chainStr || varName}_${context.resolveTree.name}`]: {
                                where: { [`${connectionField.fieldName}_NOT`]: connectionWhere[1] },
                            },
                        }
                        : { [`${varName}_${context.resolveTree.name}`]: context.resolveTree.args };
                    res.params = {
                        ...res.params,
                        ...resolveTreeParams,
                    };
                });
                return res;
            }
            if (value === null) {
                res.clauses.push(`${varName}.${dbFieldName} IS NOT NULL`);
                return res;
            }
            if (pointField) {
                if (pointField.typeMeta.array) {
                    res.clauses.push(`(NOT ${varName}.${dbFieldName} = [p in $${param} | point(p)])`);
                }
                else {
                    res.clauses.push(`(NOT ${varName}.${dbFieldName} = point($${param}))`);
                }
            }
            else {
                res.clauses.push(`(NOT ${property} = $${param})`);
            }
            res.params[param] = value;
            return res;
        }
        if (key.endsWith("_NOT_IN")) {
            const [fieldName] = key.split("_NOT_IN");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const coalesceValue = (_b = [...node.primitiveFields, ...node.temporalFields].find((f) => fieldName === f.fieldName)) === null || _b === void 0 ? void 0 : _b.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            if (pointField) {
                res.clauses.push(`(NOT ${varName}.${dbFieldName} IN [p in $${param} | point(p)])`);
                res.params[param] = value;
            }
            else {
                res.clauses.push(`(NOT ${property} IN $${param})`);
                res.params[param] = value;
            }
            return res;
        }
        if (key.endsWith("_IN")) {
            const [fieldName] = key.split("_IN");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const coalesceValue = (_c = [...node.primitiveFields, ...node.temporalFields].find((f) => fieldName === f.fieldName)) === null || _c === void 0 ? void 0 : _c.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            if (pointField) {
                res.clauses.push(`${varName}.${dbFieldName} IN [p in $${param} | point(p)]`);
                res.params[param] = value;
            }
            else {
                res.clauses.push(`${property} IN $${param}`);
                res.params[param] = value;
            }
            return res;
        }
        if (key.endsWith("_NOT_INCLUDES")) {
            const [fieldName] = key.split("_NOT_INCLUDES");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const coalesceValue = (_d = [...node.primitiveFields, ...node.temporalFields].find((f) => fieldName === f.fieldName)) === null || _d === void 0 ? void 0 : _d.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            if (pointField) {
                res.clauses.push(`(NOT point($${param}) IN ${varName}.${dbFieldName})`);
                res.params[param] = value;
            }
            else {
                res.clauses.push(`(NOT $${param} IN ${property})`);
                res.params[param] = value;
            }
            return res;
        }
        if (key.endsWith("_INCLUDES")) {
            const [fieldName] = key.split("_INCLUDES");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const coalesceValue = (_e = [...node.primitiveFields, ...node.temporalFields].find((f) => fieldName === f.fieldName)) === null || _e === void 0 ? void 0 : _e.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            if (pointField) {
                res.clauses.push(`point($${param}) IN ${varName}.${dbFieldName}`);
                res.params[param] = value;
            }
            else {
                res.clauses.push(`$${param} IN ${property}`);
                res.params[param] = value;
            }
            return res;
        }
        const equalityRelation = node.relationFields.find((x) => key === x.fieldName);
        if (equalityRelation) {
            const refNode = context.neoSchema.nodes.find((x) => x.name === equalityRelation.typeMeta.name);
            const inStr = equalityRelation.direction === "IN" ? "<-" : "-";
            const outStr = equalityRelation.direction === "OUT" ? "->" : "-";
            const relTypeStr = `[:${equalityRelation.type}]`;
            const labels = refNode.getLabelString(context);
            if (value === null) {
                res.clauses.push(`NOT EXISTS((${varName})${inStr}${relTypeStr}${outStr}(${labels}))`);
                return res;
            }
            let resultStr = [
                `EXISTS((${varName})${inStr}${relTypeStr}${outStr}(${labels}))`,
                `AND ANY(${param} IN [(${varName})${inStr}${relTypeStr}${outStr}(${param}${labels}) | ${param}] INNER_WHERE `,
            ].join(" ");
            const recurse = createWhereAndParams({
                whereInput: value,
                varName: param,
                chainStr: param,
                node: refNode,
                context,
                recursing: true,
            });
            if (recurse[0]) {
                resultStr += recurse[0];
                resultStr += ")"; // close ANY
                res.clauses.push(resultStr);
                res.params = { ...res.params, ...recurse[1] };
            }
            return res;
        }
        const equalityConnection = (_f = node.connectionFields) === null || _f === void 0 ? void 0 : _f.find((x) => key === x.fieldName);
        if (equalityConnection) {
            let nodeEntries = value;
            if (!(equalityConnection === null || equalityConnection === void 0 ? void 0 : equalityConnection.relationship.union)) {
                nodeEntries = { [equalityConnection.relationship.typeMeta.name]: value };
            }
            Object.entries(nodeEntries).forEach((entry) => {
                const refNode = context.neoSchema.nodes.find((x) => x.name === entry[0]);
                const relationship = context.neoSchema.relationships.find((x) => x.name === equalityConnection.relationshipTypeName);
                const thisParam = `${param}_${refNode.name}`;
                const relationshipVariable = `${thisParam}_${equalityConnection.relationshipTypeName}`;
                const inStr = equalityConnection.relationship.direction === "IN" ? "<-" : "-";
                const outStr = equalityConnection.relationship.direction === "OUT" ? "->" : "-";
                const labels = refNode.getLabelString(context);
                const collectedMap = `${thisParam}_map`;
                if (value === null) {
                    res.clauses.push(`NOT EXISTS((${varName})${inStr}[:${equalityConnection.relationship.type}]${outStr}(${labels}))`);
                    return res;
                }
                let resultStr = [
                    `EXISTS((${varName})${inStr}[:${equalityConnection.relationship.type}]${outStr}(${labels}))`,
                    `AND ANY(${collectedMap} IN [(${varName})${inStr}[${relationshipVariable}:${equalityConnection.relationship.type}]${outStr}(${thisParam}${labels})`,
                    ` | { node: ${thisParam}, relationship: ${relationshipVariable} } ] INNER_WHERE `,
                ].join(" ");
                const parameterPrefix = recursing
                    ? `${chainStr || varName}_${context.resolveTree.name}.where.${key}`
                    : `${varName}_${context.resolveTree.name}.where.${key}`;
                const connectionWhere = create_connection_where_and_params_1.default({
                    whereInput: entry[1],
                    context,
                    node: refNode,
                    nodeVariable: `${collectedMap}.node`,
                    relationship,
                    relationshipVariable: `${collectedMap}.relationship`,
                    parameterPrefix,
                });
                resultStr += connectionWhere[0];
                resultStr += ")"; // close ALL
                res.clauses.push(resultStr);
                const resolveTreeParams = recursing
                    ? {
                        [`${chainStr || varName}_${context.resolveTree.name}`]: {
                            where: { [equalityConnection.fieldName]: connectionWhere[1] },
                        },
                    }
                    : { [`${varName}_${context.resolveTree.name}`]: context.resolveTree.args };
                res.params = {
                    ...res.params,
                    ...resolveTreeParams,
                };
            });
            return res;
        }
        if (key.endsWith("_MATCHES")) {
            const [fieldName] = key.split("_MATCHES");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const coalesceValue = (_g = node.primitiveFields.find((f) => fieldName === f.fieldName)) === null || _g === void 0 ? void 0 : _g.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            res.clauses.push(`${property} =~ $${param}`);
            res.params[param] = value;
            return res;
        }
        if (key.endsWith("_NOT_CONTAINS")) {
            const [fieldName] = key.split("_NOT_CONTAINS");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const coalesceValue = (_h = node.primitiveFields.find((f) => fieldName === f.fieldName)) === null || _h === void 0 ? void 0 : _h.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            res.clauses.push(`(NOT ${property} CONTAINS $${param})`);
            res.params[param] = value;
            return res;
        }
        if (key.endsWith("_CONTAINS")) {
            const [fieldName] = key.split("_CONTAINS");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const coalesceValue = (_j = node.primitiveFields.find((f) => fieldName === f.fieldName)) === null || _j === void 0 ? void 0 : _j.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            res.clauses.push(`${property} CONTAINS $${param}`);
            res.params[param] = value;
            return res;
        }
        if (key.endsWith("_NOT_STARTS_WITH")) {
            const [fieldName] = key.split("_NOT_STARTS_WITH");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const coalesceValue = (_k = node.primitiveFields.find((f) => fieldName === f.fieldName)) === null || _k === void 0 ? void 0 : _k.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            res.clauses.push(`(NOT ${property} STARTS WITH $${param})`);
            res.params[param] = value;
            return res;
        }
        if (key.endsWith("_STARTS_WITH")) {
            const [fieldName] = key.split("_STARTS_WITH");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const coalesceValue = (_l = node.primitiveFields.find((f) => fieldName === f.fieldName)) === null || _l === void 0 ? void 0 : _l.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            res.clauses.push(`${property} STARTS WITH $${param}`);
            res.params[param] = value;
            return res;
        }
        if (key.endsWith("_NOT_ENDS_WITH")) {
            const [fieldName] = key.split("_NOT_ENDS_WITH");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const coalesceValue = (_m = node.primitiveFields.find((f) => fieldName === f.fieldName)) === null || _m === void 0 ? void 0 : _m.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            res.clauses.push(`(NOT ${property} ENDS WITH $${param})`);
            res.params[param] = value;
            return res;
        }
        if (key.endsWith("_ENDS_WITH")) {
            const [fieldName] = key.split("_ENDS_WITH");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const coalesceValue = (_o = node.primitiveFields.find((f) => fieldName === f.fieldName)) === null || _o === void 0 ? void 0 : _o.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            res.clauses.push(`${property} ENDS WITH $${param}`);
            res.params[param] = value;
            return res;
        }
        if (key.endsWith("_LT")) {
            const [fieldName] = key.split("_LT");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const coalesceValue = (_p = [...node.primitiveFields, ...node.temporalFields].find((f) => fieldName === f.fieldName)) === null || _p === void 0 ? void 0 : _p.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            let clause = `${property} < $${param}`;
            if (pointField) {
                clause = `distance(${varName}.${fieldName}, point($${param}.point)) < $${param}.distance`;
            }
            if (durationField) {
                clause = `datetime() + ${property} < datetime() + $${param}`;
            }
            res.clauses.push(clause);
            res.params[param] = value;
            return res;
        }
        if (key.endsWith("_LTE")) {
            const [fieldName] = key.split("_LTE");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const coalesceValue = (_q = [...node.primitiveFields, ...node.temporalFields].find((f) => fieldName === f.fieldName)) === null || _q === void 0 ? void 0 : _q.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            let clause = `${property} <= $${param}`;
            if (pointField) {
                clause = `distance(${varName}.${fieldName}, point($${param}.point)) <= $${param}.distance`;
            }
            if (durationField) {
                clause = `datetime() + ${property} <= datetime() + $${param}`;
            }
            res.clauses.push(clause);
            res.params[param] = value;
            return res;
        }
        if (key.endsWith("_GT")) {
            const [fieldName] = key.split("_GT");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const coalesceValue = (_r = [...node.primitiveFields, ...node.temporalFields].find((f) => fieldName === f.fieldName)) === null || _r === void 0 ? void 0 : _r.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            let clause = `${property} > $${param}`;
            if (pointField) {
                clause = `distance(${varName}.${fieldName}, point($${param}.point)) > $${param}.distance`;
            }
            if (durationField) {
                clause = `datetime() + ${property} > datetime() + $${param}`;
            }
            res.clauses.push(clause);
            res.params[param] = value;
            return res;
        }
        if (key.endsWith("_GTE")) {
            const [fieldName] = key.split("_GTE");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            const coalesceValue = (_s = [...node.primitiveFields, ...node.temporalFields].find((f) => fieldName === f.fieldName)) === null || _s === void 0 ? void 0 : _s.coalesceValue;
            const property = coalesceValue !== undefined
                ? `coalesce(${varName}.${dbFieldName}, ${coalesceValue})`
                : `${varName}.${dbFieldName}`;
            let clause = `${property} >= $${param}`;
            if (pointField) {
                clause = `distance(${varName}.${fieldName}, point($${param}.point)) >= $${param}.distance`;
            }
            if (durationField) {
                clause = `datetime() + ${property} >= datetime() + $${param}`;
            }
            res.clauses.push(clause);
            res.params[param] = value;
            return res;
        }
        if (key.endsWith("_DISTANCE")) {
            const [fieldName] = key.split("_DISTANCE");
            dbFieldName = map_to_db_property_1.default(node, fieldName);
            res.clauses.push(`distance(${varName}.${dbFieldName}, point($${param}.point)) = $${param}.distance`);
            res.params[param] = value;
            return res;
        }
        if (["AND", "OR"].includes(key)) {
            const innerClauses = [];
            value.forEach((v, i) => {
                const recurse = createWhereAndParams({
                    whereInput: v,
                    varName,
                    chainStr: `${param}${i > 0 ? i : ""}`,
                    node,
                    context,
                    recursing: true,
                });
                if (recurse[0]) {
                    innerClauses.push(`${recurse[0]}`);
                    // TODO: mergeDeep function signature has changed from @graphql-tools/utils 7->8
                    // Replace code below with commented line when merging in version 8 of library
                    // res.params = mergeDeep([res.params, recurse[1]]);
                    res.params = utils_1.mergeDeep(res.params, recurse[1]);
                }
            });
            if (innerClauses.length) {
                res.clauses.push(`(${innerClauses.join(` ${key} `)})`);
            }
            return res;
        }
        if (value === null) {
            res.clauses.push(`${varName}.${dbFieldName} IS NULL`);
            return res;
        }
        if (pointField) {
            if (pointField.typeMeta.array) {
                res.clauses.push(`${varName}.${dbFieldName} = [p in $${param} | point(p)]`);
            }
            else {
                res.clauses.push(`${varName}.${dbFieldName} = point($${param})`);
            }
        }
        else {
            const field = [...node.primitiveFields, ...node.temporalFields].find((f) => key === f.fieldName);
            const property = (field === null || field === void 0 ? void 0 : field.coalesceValue) !== undefined
                ? `coalesce(${varName}.${field.fieldName}, ${field.coalesceValue})`
                : `${varName}.${dbFieldName}`;
            res.clauses.push(`${property} = $${param}`);
        }
        res.params[param] = value;
        return res;
    }
    const { clauses, params } = Object.entries(whereInput).reduce(reducer, { clauses: [], params: {} });
    let where = `${!recursing ? "WHERE " : ""}`;
    where += clauses.join(" AND ").replace(/INNER_WHERE/gi, "WHERE");
    return [where, params];
}
exports.default = createWhereAndParams;
//# sourceMappingURL=create-where-and-params.js.map