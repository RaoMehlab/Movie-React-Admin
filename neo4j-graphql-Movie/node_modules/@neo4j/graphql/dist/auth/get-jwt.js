"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = require("http");
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const jwks_rsa_1 = require("jwks-rsa");
const debug_1 = __importDefault(require("debug"));
const constants_1 = require("../constants");
const debug = debug_1.default(constants_1.DEBUG_AUTH);
async function getJWT(context) {
    var _a, _b;
    const jwtConfig = (_a = context.neoSchema.config) === null || _a === void 0 ? void 0 : _a.jwt;
    let result;
    let client;
    if (!jwtConfig) {
        debug("JWT not configured");
        return result;
    }
    const req = context instanceof http_1.IncomingMessage ? context : context.req || context.request;
    if (!req) {
        debug("Could not get .req or .request from context");
        return result;
    }
    if (!req.headers && !req.cookies) {
        debug(".headers or .cookies not found on req");
        return result;
    }
    const authorization = (req.headers.authorization || req.headers.Authorization || ((_b = req.cookies) === null || _b === void 0 ? void 0 : _b.token));
    if (!authorization) {
        debug("Could not get .authorization, .Authorization or .cookies.token from req");
        return result;
    }
    const token = authorization.split("Bearer ")[1];
    if (!token) {
        debug("Authorization header was not in expected format 'Bearer <token>'");
        return result;
    }
    try {
        if (jwtConfig.noVerify) {
            debug("Skipping verifying JWT as noVerify is not set");
            result = jsonwebtoken_1.default.decode(token);
        }
        else if (jwtConfig.jwksEndpoint) {
            debug("Verifying JWT using OpenID Public Key Set Endpoint");
            // Creates a JWKS Client with a rate limit that
            // limits the number of calls to our JWKS endpoint
            client = new jwks_rsa_1.JwksClient({
                jwksUri: jwtConfig.jwksEndpoint,
                rateLimit: true,
                jwksRequestsPerMinute: 10,
                cache: true,
                cacheMaxEntries: 5,
                cacheMaxAge: 600000,
            });
            result = await verifyJWKS(client, token);
        }
        else if (jwtConfig.secret) {
            debug("Verifying JWT using secret");
            result = jsonwebtoken_1.default.verify(token, jwtConfig.secret, {
                algorithms: ["HS256", "RS256"],
            });
        }
    }
    catch (error) {
        debug("%s", error);
    }
    return result;
}
// Verifies the JWKS asynchronously, returns Promise
async function verifyJWKS(client, token) {
    function getKey(header, callback) {
        // Callback that returns the key the corresponding key[kid]
        client.getSigningKey(header.kid, (err, key) => {
            const signingKey = key === null || key === void 0 ? void 0 : key.getPublicKey();
            callback(null, signingKey);
        });
    }
    // Returns a Promise with verification result or error
    return new Promise((resolve, reject) => jsonwebtoken_1.default.verify(token, getKey, {
        algorithms: ["HS256", "RS256"],
    }, function verifyCallback(err, decoded) {
        return err ? reject(err) : resolve(decoded);
    }));
}
exports.default = getJWT;
//# sourceMappingURL=get-jwt.js.map