import { Driver } from "neo4j-driver";
import { DocumentNode, GraphQLSchema } from "graphql";
import { IExecutableSchemaDefinition } from "@graphql-tools/schema";
import { SchemaDirectiveVisitor } from "@graphql-tools/utils";
import type { DriverConfig, CypherQueryOptions } from "../types";
import Node from "./Node";
import Relationship from "./Relationship";
import { AssertIndexesAndConstraintsOptions } from "./utils/asserts-indexes-and-constraints";
export interface Neo4jGraphQLJWT {
    jwksEndpoint?: string;
    secret?: string;
    noVerify?: boolean;
    rolesPath?: string;
}
export interface Neo4jGraphQLConfig {
    driverConfig?: DriverConfig;
    jwt?: Neo4jGraphQLJWT;
    enableRegex?: boolean;
    skipValidateTypeDefs?: boolean;
    queryOptions?: CypherQueryOptions;
}
export interface Neo4jGraphQLConstructor extends Omit<IExecutableSchemaDefinition, "schemaDirectives"> {
    config?: Neo4jGraphQLConfig;
    driver?: Driver;
    schemaDirectives?: Record<string, typeof SchemaDirectiveVisitor>;
}
declare class Neo4jGraphQL {
    schema: GraphQLSchema;
    nodes: Node[];
    relationships: Relationship[];
    document: DocumentNode;
    private driver?;
    config?: Neo4jGraphQLConfig;
    constructor(input: Neo4jGraphQLConstructor);
    private createWrappedSchema;
    checkNeo4jCompat(input?: {
        driver?: Driver;
        driverConfig?: DriverConfig;
    }): Promise<void>;
    assertIndexesAndConstraints(input?: {
        driver?: Driver;
        driverConfig?: DriverConfig;
        options?: AssertIndexesAndConstraintsOptions;
    }): Promise<void>;
}
export default Neo4jGraphQL;
//# sourceMappingURL=Neo4jGraphQL.d.ts.map