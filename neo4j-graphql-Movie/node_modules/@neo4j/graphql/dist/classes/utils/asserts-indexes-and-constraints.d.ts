import { Driver } from "neo4j-driver";
import Node from "../Node";
import { DriverConfig } from "../..";
export interface AssertIndexesAndConstraintsOptions {
    create?: boolean;
}
interface Constraint {
    id: number;
    name: string;
    type: string;
    entityType?: string;
    labelsOrTypes: string[];
    properties: string[];
    ownedIndexId: number;
}
/**
 * Format of constraint returned from db.constraints procedure. For example:
 *
 *  {
 *      description: "CONSTRAINT ON ( cjzrqcaflcfrvpjdmctjjvtbkmaqtvdkbook:cJzrQcaFLCFRvPJDmCTJjvtBkmaQtvdkBook ) ASSERT (cjzrqcaflcfrvpjdmctjjvtbkmaqtvdkbook.isbn) IS UNIQUE",
 *      details: "Constraint( id=4, name='cJzrQcaFLCFRvPJDmCTJjvtBkmaQtvdkBook_isbn', type='UNIQUENESS', schema=(:cJzrQcaFLCFRvPJDmCTJjvtBkmaQtvdkBook {isbn}), ownedIndex=3 )",
 *      name: "cJzrQcaFLCFRvPJDmCTJjvtBkmaQtvdkBook_isbn"
 *  }
 */
export interface LegacyConstraint {
    description?: string;
    details?: string;
    name?: string;
}
export declare function parseLegacyConstraint(record: LegacyConstraint): Constraint;
declare function assertIndexesAndConstraints({ driver, driverConfig, nodes, options, }: {
    driver: Driver;
    driverConfig?: DriverConfig;
    nodes: Node[];
    options?: AssertIndexesAndConstraintsOptions;
}): Promise<void>;
export default assertIndexesAndConstraints;
//# sourceMappingURL=asserts-indexes-and-constraints.d.ts.map